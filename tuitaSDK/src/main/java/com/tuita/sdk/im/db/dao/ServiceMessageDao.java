package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.tuita.sdk.im.db.module.ServiceMessage;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SERVICE_MESSAGE.
*/
public class ServiceMessageDao extends AbstractDao<ServiceMessage, Long> {

    public static final String TABLENAME = "SERVICE_MESSAGE";

    /**
     * Properties of entity ServiceMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Myid = new Property(1, long.class, "myid", false, "MYID");
        public final static Property Service_id = new Property(2, long.class, "service_id", false, "SERVICE_ID");
        public final static Property Cate_id = new Property(3, Long.class, "cate_id", false, "CATE_ID");
        public final static Property Service_name = new Property(4, String.class, "service_name", false, "SERVICE_NAME");
        public final static Property Service_avatar = new Property(5, String.class, "service_avatar", false, "SERVICE_AVATAR");
        public final static Property Cate_name = new Property(6, String.class, "cate_name", false, "CATE_NAME");
        public final static Property Cate_avatar = new Property(7, String.class, "cate_avatar", false, "CATE_AVATAR");
        public final static Property Avatar = new Property(8, String.class, "avatar", false, "AVATAR");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Digst = new Property(10, String.class, "digst", false, "DIGST");
        public final static Property Image_url = new Property(11, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Exra = new Property(12, String.class, "exra", false, "EXRA");
        public final static Property Intent_data = new Property(13, String.class, "intent_data", false, "INTENT_DATA");
        public final static Property Detail_type = new Property(14, Integer.class, "detail_type", false, "DETAIL_TYPE");
        public final static Property Date = new Property(15, Long.class, "date", false, "DATE");
        public final static Property By1 = new Property(16, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(17, String.class, "by2", false, "BY2");
        public final static Property By3 = new Property(18, String.class, "by3", false, "BY3");
        public final static Property SubDigst = new Property(19, String.class, "subDigst", false, "SUBDIGST");
//        public final static Property IsShowNotify = new Property(20, Boolean.class, "isShowNotify", false, "IS_SHOW_NOTIFY");
    };


    public ServiceMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ServiceMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SERVICE_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MYID' INTEGER NOT NULL ," + // 1: myid
                "'SERVICE_ID' INTEGER NOT NULL ," + // 2: service_id
                "'CATE_ID' INTEGER," + // 3: cate_id
                "'SERVICE_NAME' TEXT," + // 4: service_name
                "'SERVICE_AVATAR' TEXT," + // 5: service_avatar
                "'CATE_NAME' TEXT," + // 6: cate_name
                "'CATE_AVATAR' TEXT," + // 7: cate_avatar
                "'AVATAR' TEXT," + // 8: avatar
                "'TITLE' TEXT," + // 9: title
                "'DIGST' TEXT," + // 10: digst
                "'IMAGE_URL' TEXT," + // 11: image_url
                "'EXRA' TEXT," + // 12: exra
                "'INTENT_DATA' TEXT," + // 13: intent_data
                "'DETAIL_TYPE' INTEGER," + // 14: detail_type
                "'DATE' INTEGER," + // 15: date
                "'BY1' TEXT," + // 16: by1
                "'BY2' TEXT," + // 17: by2
                "'BY3' TEXT," + // 18: by3
                "'SUBDIGST' TEXT);");  // 19: subDigst
//                "'IS_SHOW_NOTIFY' INTEGER);"); // 20: is_show_notify
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SERVICE_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ServiceMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMyid());
        stmt.bindLong(3, entity.getService_id());
 
        Long cate_id = entity.getCate_id();
        if (cate_id != null) {
            stmt.bindLong(4, cate_id);
        }
 
        String service_name = entity.getService_name();
        if (service_name != null) {
            stmt.bindString(5, service_name);
        }
 
        String service_avatar = entity.getService_avatar();
        if (service_avatar != null) {
            stmt.bindString(6, service_avatar);
        }
 
        String cate_name = entity.getCate_name();
        if (cate_name != null) {
            stmt.bindString(7, cate_name);
        }
 
        String cate_avatar = entity.getCate_avatar();
        if (cate_avatar != null) {
            stmt.bindString(8, cate_avatar);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String digst = entity.getDigst();
        if (digst != null) {
            stmt.bindString(11, digst);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(12, image_url);
        }
 
        String exra = entity.getExra();
        if (exra != null) {
            stmt.bindString(13, exra);
        }
 
        String intent_data = entity.getIntent_data();
        if (intent_data != null) {
            stmt.bindString(14, intent_data);
        }
 
        Integer detail_type = entity.getDetail_type();
        if (detail_type != null) {
            stmt.bindLong(15, detail_type);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(16, date);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(17, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(18, by2);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(19, by3);
        }

        String subDigst = entity.getSubDigst();
        if (subDigst != null) {
            stmt.bindString(20, subDigst);
        }

//        Boolean isShowNotify = entity.getIsShowNotify();
//        if (isShowNotify != null) {
//            stmt.bindLong(21, isShowNotify ? 1l: 0l);
//        }else {
//            stmt.bindLong(21,1l);
//        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ServiceMessage readEntity(Cursor cursor, int offset) {
        ServiceMessage entity = new ServiceMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // myid
            cursor.getLong(offset + 2), // service_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cate_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // service_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // service_avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cate_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cate_avatar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // digst
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // image_url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // exra
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // intent_data
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // detail_type
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // date
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // by1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // by2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // by3
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // subDigst
//            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0 // is_show_notify
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ServiceMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyid(cursor.getLong(offset + 1));
        entity.setService_id(cursor.getLong(offset + 2));
        entity.setCate_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setService_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setService_avatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCate_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCate_avatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDigst(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImage_url(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExra(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIntent_data(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDetail_type(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDate(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setBy1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBy2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBy3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSubDigst(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
//        entity.setIsShowNotify(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ServiceMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ServiceMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
