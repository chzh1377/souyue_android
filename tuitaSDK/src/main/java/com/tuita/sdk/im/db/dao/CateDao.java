package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.tuita.sdk.im.db.module.Cate;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATE.
*/
public class CateDao extends AbstractDao<Cate, Long> {

    public static final String TABLENAME = "CATE";

    /**
     * Properties of entity Cate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property My_id = new Property(1, long.class, "my_id", false, "MY_ID");
        public final static Property Cate_id = new Property(2, long.class, "cate_id", false, "CATE_ID");
        public final static Property Cate_name = new Property(3, String.class, "cate_name", false, "CATE_NAME");
        public final static Property Cate_avatar = new Property(4, String.class, "cate_avatar", false, "CATE_AVATAR");
        public final static Property Digst = new Property(5, String.class, "digst", false, "DIGST");
        public final static Property Is_has_cateid = new Property(6, Integer.class, "is_has_cateid", false, "IS_HAS_CATEID");
        public final static Property Bubble_num = new Property(7, Integer.class, "bubble_num", false, "BUBBLE_NUM");
        public final static Property Date = new Property(8, long.class, "date", false, "DATE");
        public final static Property By1 = new Property(9, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(10, String.class, "by2", false, "BY2");
        public final static Property By3 = new Property(11, String.class, "by3", false, "BY3");
    };


    public CateDao(DaoConfig config) {
        super(config);
    }
    
    public CateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MY_ID' INTEGER NOT NULL ," + // 1: my_id
                "'CATE_ID' INTEGER NOT NULL ," + // 2: cate_id
                "'CATE_NAME' TEXT," + // 3: cate_name
                "'CATE_AVATAR' TEXT," + // 4: cate_avatar
                "'DIGST' TEXT," + // 5: digst
                "'IS_HAS_CATEID' INTEGER," + // 6: is_has_cateid
                "'BUBBLE_NUM' INTEGER," + // 7: is_notify
                "'DATE' INTEGER," + // 8: date
                "'BY1' TEXT," + // 9: by1
                "'BY2' TEXT," + // 10: by2
                "'BY3' TEXT);"); // 11: by3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMy_id());
        stmt.bindLong(3, entity.getCate_id());
 
        String cate_name = entity.getCate_name();
        if (cate_name != null) {
            stmt.bindString(4, cate_name);
        }
 
        String cate_avatar = entity.getCate_avatar();
        if (cate_avatar != null) {
            stmt.bindString(5, cate_avatar);
        }
 
        String digst = entity.getDigst();
        if (digst != null) {
            stmt.bindString(6, digst);
        }
 
        Integer is_has_cateid = entity.getIs_has_cateid();
        if (is_has_cateid != null) {
            stmt.bindLong(7, is_has_cateid);
        }
 
        Integer bubble_num = entity.getBubble_num();
        if (bubble_num != null) {
            stmt.bindLong(8, bubble_num);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(10, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(11, by2);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(12, by3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cate readEntity(Cursor cursor, int offset) {
        Cate entity = new Cate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // my_id
            cursor.getLong(offset + 2), // cate_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cate_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cate_avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // digst
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // is_has_cateid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // bubble_num
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // by1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // by2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // by3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMy_id(cursor.getLong(offset + 1));
        entity.setCate_id(cursor.getLong(offset + 2));
        entity.setCate_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCate_avatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDigst(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_has_cateid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBubble_num(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setBy1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBy2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBy3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
