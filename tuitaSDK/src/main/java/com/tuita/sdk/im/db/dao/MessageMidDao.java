package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.tuita.sdk.im.db.module.MessageMid;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_MID.
*/
public class MessageMidDao extends AbstractDao<MessageMid, Void> {

    public static final String TABLENAME = "MESSAGE_MID";

    /**
     * Properties of entity MessageMid.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mid = new Property(0, String.class, "mid", true, "MID");
        public final static Property Timestamp = new Property(1, long.class, "timestamp", false, "TIMESTAMP");
    };


    public MessageMidDao(DaoConfig config) {
        super(config);
    }
    
    public MessageMidDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_MID' (" + //
                "'MID' TEXT PRIMARY KEY NOT NULL ," + // 1: mid
                "'TIMESTAMP' INTEGER NOT NULL );"); // 2: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_MID'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageMid entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMid());
        stmt.bindLong(2, entity.getTimestamp());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MessageMid readEntity(Cursor cursor, int offset) {
        MessageMid entity = new MessageMid( //
            cursor.getString(offset + 0), // mid
            cursor.getLong(offset + 1) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageMid entity, int offset) {
        entity.setMid(cursor.getString(offset + 0));
        entity.setTimestamp(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MessageMid entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MessageMid entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
