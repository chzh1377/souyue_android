package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.tuita.sdk.im.db.module.MessageHistory;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table MESSAGE_HISTORY.
 */
public class MessageHistoryDao extends AbstractDao<MessageHistory, Long> {

    public static final String TABLENAME = "MESSAGE_HISTORY";

    /**
     * Properties of entity Message_History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Myid = new Property(1, long.class, "myid", false, "MYID");
        public final static Property Chat_id = new Property(2, Long.class, "chat_id", false, "CHAT_ID");
        public final static Property Chat_type = new Property(3, Integer.class, "chat_type", false, "CHAT_TYPE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Content_type = new Property(5, Integer.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Date = new Property(6, Long.class, "date", false, "DATE");
        public final static Property Session_order = new Property(7, Long.class, "session_order", false, "SESSION_ORDER");
        public final static Property Uuid = new Property(8, String.class, "uuid", false, "UUID");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property Sender = new Property(10, Long.class, "sender", false, "SENDER");
        public final static Property By1 = new Property(11, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(12, String.class, "by2", false, "BY2");
        public final static Property Contentforat = new Property(13, String.class, "contentforat", false, "CONTENTFORAT");
        public final static Property By3 = new Property(14, String.class, "by3", false, "BY3");
        public final static Property By4 = new Property(15, String.class, "by4", false, "BY4");
        public final static Property fileMsgId = new Property(16, Long.class,"fileMsgId",false,"FILE_MSG_ID");
    };


    public MessageHistoryDao(DaoConfig config) {
        super(config);
    }

    public MessageHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MYID' INTEGER NOT NULL ," + // 1: myid
                "'CHAT_ID' INTEGER," + // 2: chat_id
                "'CHAT_TYPE' INTEGER," + // 3: chat_type
                "'CONTENT' TEXT," + // 4: content
                "'CONTENT_TYPE' INTEGER," + // 5: content_type
                "'DATE' INTEGER," + // 6: date
                "'SESSION_ORDER' INTEGER," + // 7: session_order
                "'UUID' TEXT," + // 8: uuid
                "'STATUS' INTEGER," + // 9: status
                "'SENDER' INTEGER," + // 10: sender
                "'BY1' TEXT," + // 11: by1
                "'BY2' TEXT," + // 12: by2
                "'CONTENTFORAT' TEXT," + // 13: contentforat
                "'BY3' TEXT," + // 14: by3
                "'BY4' TEXT,"+   // 15: by4
                "'FILE_MSG_ID' LONG);"); // 16:fileMsgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageHistory entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMyid());

        Long chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindLong(3, chat_id);
        }

        Integer chat_type = entity.getChat_type();
        if (chat_type != null) {
            stmt.bindLong(4, chat_type);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }

        Integer content_type = entity.getContent_type();
        if (content_type != null) {
            stmt.bindLong(6, content_type);
        }

        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }

        Long session_order = entity.getSession_order();
        if (session_order != null) {
            stmt.bindLong(8, session_order);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(9, uuid);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }

        Long sender = entity.getSender();
        if (sender != null) {
            stmt.bindLong(11, sender);
        }

        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(12, by1);
        }

        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(13, by2);
        }

        String contentforat = entity.getContentforat();
        if (contentforat != null) {
            stmt.bindString(14, contentforat);
        }

        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(15, by3);
        }

        String by4 = entity.getBy4();
        if (by4 != null) {
            stmt.bindString(16, by4);
        }

        Long fileMsgId = entity.getFileMsgId();
        if (fileMsgId != null) {
            stmt.bindLong(17, fileMsgId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public MessageHistory readEntity(Cursor cursor, int offset) {
        MessageHistory entity = new MessageHistory( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // myid
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // chat_id
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // chat_type
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // content_type
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // date
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // session_order
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uuid
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // sender
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // by1
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // by2
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // contentforat
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // by3
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // by4
                cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // fileMsgId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyid(cursor.getLong(offset + 1));
        entity.setChat_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setChat_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSession_order(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUuid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSender(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setBy1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBy2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContentforat(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBy3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBy4(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBy4(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(MessageHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
