package com.tuita.sdk.im.db.dao;

import com.google.gson.Gson;
import com.tuita.sdk.im.db.module.Group;
import com.tuita.sdk.im.db.module.GroupExtendInfo;
import com.tuita.sdk.im.db.module.ImToCricle;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP.
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "GROUPS";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GROUP_ID = new Property(1, long.class, "GROUP_ID", false, "GROUP__ID");
        public final static Property GROUP_AVATAR = new Property(2, String.class, "GROUP_AVATAR", false, "GROUP__AVATAR");
        public final static Property GROUP_NICK_NAME = new Property(3, String.class, "GROUP_NICK_NAME", false, "GROUP__NICK__NAME");
        public final static Property SELF_ID = new Property(4, long.class, "SELF_ID", false, "SELF__ID");
        public final static Property IS_NICK_SET = new Property(5, Integer.class, "IS_NICK_SET", false, "IS__NICK__SET");
        public final static Property IS_GROUP_SAVED = new Property(6, int.class, "IS_GROUP_SAVED", false, "IS__GROUP__SAVED");
        public final static Property IS_NEWS_NOTIFY = new Property(7, int.class, "IS_NEWS_NOTIFY", false, "IS__NEWS__NOTIFY");
        public final static Property MAX_NUMBERS = new Property(8, Integer.class, "MAX_NUMBERS", false, "MAX__NUMBERS");
        public final static Property BY1 = new Property(9, String.class, "BY1", false, "BY1");
        public final static Property BY2 = new Property(10, String.class, "BY2", false, "BY2");
        public final static Property OWNER_ID = new Property(11, long.class, "OWNER_ID", false, "OWNER__ID");
        public final static Property EXTENDINFO = new Property(12, String.class, "EXTENDINFO", false, "EXTENDINFO");//extendInfo
    };


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUPS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GROUP__ID' INTEGER NOT NULL ," + // 1: GROUP_ID
                "'GROUP__AVATAR' TEXT," + // 2: GROUP_AVATAR
                "'GROUP__NICK__NAME' TEXT," + // 3: GROUP_NICK_NAME
                "'SELF__ID' INTEGER NOT NULL ," + // 4: SELF_ID
                "'IS__NICK__SET' INTEGER," + // 5: IS_NICK_SET
                "'IS__GROUP__SAVED' INTEGER NOT NULL ," + // 6: IS_GROUP_SAVED
                "'IS__NEWS__NOTIFY' INTEGER NOT NULL ," + // 7: IS_NEWS_NOTIFY
                "'MAX__NUMBERS' INTEGER," + // 8: MAX_NUMBERS
                "'BY1' TEXT," + // 9: BY1
                "'BY2' TEXT," + // 10: BY2
                "'OWNER__ID' INTEGER," +//11: OWNER_ID
                "EXTENDINFO TEXT);");//12: EXTENDINFO
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUPS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroup_id());
 
        String GROUP_AVATAR = entity.getGroup_avatar();
        if (GROUP_AVATAR != null) {
            stmt.bindString(3, GROUP_AVATAR);
        }
 
        String GROUP_NICK_NAME = entity.getGroup_nick_name();
        if (GROUP_NICK_NAME != null) {
            stmt.bindString(4, GROUP_NICK_NAME);
        }
        stmt.bindLong(5, entity.getSelf_id());
 
        Integer IS_NICK_SET = entity.getIs_nick_set();
        if (IS_NICK_SET != null) {
            stmt.bindLong(6, IS_NICK_SET);
        }
        stmt.bindLong(7, entity.getIs_group_saved());
        stmt.bindLong(8, entity.getIs_news_notify());
 
        Integer MAX_NUMBERS = entity.getMax_numbers();
        if (MAX_NUMBERS != null) {
            stmt.bindLong(9, MAX_NUMBERS);
        }
 
        String BY1 = entity.getBy1();
        if (BY1 != null) {
            stmt.bindString(10, BY1);
        }
 
        String BY2 = entity.getBy2();
        if (BY2 != null) {
            stmt.bindString(11, BY2);
        }
        Long OWNER_ID = entity.getOwner_id();
        if (OWNER_ID != null) {
            stmt.bindLong(12, OWNER_ID);
        }
        GroupExtendInfo extendInfo = entity.getExtendInfo();
        if(extendInfo!=null)
        {
            String str= new Gson().toJson(extendInfo, GroupExtendInfo.class);
            stmt.bindString(13,str);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Group readEntity(Cursor cursor, int offset) {

        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // GROUP_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GROUP_AVATAR
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // GROUP_NICK_NAME
            cursor.getLong(offset + 4), // SELF_ID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // IS_NICK_SET
            cursor.getInt(offset + 6), // IS_GROUP_SAVED
            cursor.getInt(offset + 7), // IS_NEWS_NOTIFY
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // MAX_NUMBERS
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // BY1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BY2
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // OWNER__ID
                getExtendInfo(cursor,offset) // OWNER__ID
        );
        return entity;
    }

    private GroupExtendInfo getExtendInfo(Cursor cursor,int offset)
    {
        GroupExtendInfo extendInfo =new GroupExtendInfo();
        if(!cursor.isNull(offset + 12))
        {
            try {
                JSONObject extendsJsonObj = newJsonObject(cursor.getString(offset + 12));
                JSONArray circleListArray = extendsJsonObj.getJSONArray("circle_boundCircleList");
                List<ImToCricle> circle_boundCircleList = new ArrayList<ImToCricle>();
                ImToCricle imToCricle;
                JSONObject circleJsonObj;
                for (int i =0 ; i<circleListArray.length();i++)
                {
                    circleJsonObj = circleListArray.getJSONObject(i);
                    imToCricle = new ImToCricle();
                    imToCricle.setKeyword(circleJsonObj.getString("keyword"));
                    imToCricle.setSrpId(circleJsonObj.getString("srpId"));
                    imToCricle.setInterestId(circleJsonObj.getLong("interestId"));
                    imToCricle.setInterestLogo(circleJsonObj.getString("interestLogo"));
                    imToCricle.setInterestName(circleJsonObj.getString("interestName"));
                    imToCricle.setType(circleJsonObj.getInt("type"));
                    circle_boundCircleList.add(imToCricle);
                }
                extendInfo.setCircle_boundCircleList(circle_boundCircleList);
            }catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        return extendInfo;
    }
    private JSONObject newJsonObject( String key)
    {
        try {
            return new JSONObject(key);
        } catch (JSONException e) {
            return new JSONObject();
        }
    }
    private JSONArray newJsonArray( String key)
    {
        try {
            return new JSONArray(key);
        } catch (JSONException e) {
            return new JSONArray();
        }
    }
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.getLong(offset + 1));
        entity.setGroup_avatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_nick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSelf_id(cursor.getLong(offset + 4));
        entity.setIs_nick_set(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIs_group_saved(cursor.getInt(offset + 6));
        entity.setIs_news_notify(cursor.getInt(offset + 7));
        entity.setMax_numbers(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBy1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBy2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOwner_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setExtendInfo(getExtendInfo(cursor,offset));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
