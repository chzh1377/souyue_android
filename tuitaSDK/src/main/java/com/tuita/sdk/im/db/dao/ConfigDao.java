package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuita.sdk.im.db.module.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIG.
*/
public class ConfigDao extends AbstractDao<Config, Long> {

    public static final String TABLENAME = "CONFIG";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Myid = new Property(1, Long.class, "myid", false, "MYID");
        public final static Property Contact_last_update = new Property(2, Long.class, "contact_last_update", false, "CONTACT_LAST_UPDATE");
        public final static Property Total_message_bubble = new Property(3, Integer.class, "total_message_bubble", false, "TOTAL_MESSAGE_BUBBLE");
        public final static Property Friend_bubble = new Property(4, Integer.class, "friend_bubble", false, "FRIEND_BUBBLE");
        public final static Property By1 = new Property(5, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(6, String.class, "by2", false, "BY2");
    };


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MYID' INTEGER," + // 1: myid
                "'CONTACT_LAST_UPDATE' INTEGER," + // 2: contact_last_update
                "'TOTAL_MESSAGE_BUBBLE' INTEGER," + // 3: total_message_bubble
                "'FRIEND_BUBBLE' INTEGER," + // 4: friend_bubble
                "'BY1' TEXT," + // 5: by1
                "'BY2' TEXT);"); // 6: by2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long myid = entity.getMyid();
        if (myid != null) {
            stmt.bindLong(2, myid);
        }
 
        Long contact_last_update = entity.getContact_last_update();
        if (contact_last_update != null) {
            stmt.bindLong(3, contact_last_update);
        }
 
        Integer total_message_bubble = entity.getTotal_message_bubble();
        if (total_message_bubble != null) {
            stmt.bindLong(4, total_message_bubble);
        }
 
        Integer friend_bubble = entity.getFriend_bubble();
        if (friend_bubble != null) {
            stmt.bindLong(5, friend_bubble);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(6, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(7, by2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // myid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // contact_last_update
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // total_message_bubble
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // friend_bubble
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // by1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // by2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setContact_last_update(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTotal_message_bubble(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFriend_bubble(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBy1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBy2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Config entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Config entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
