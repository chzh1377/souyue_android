package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuita.sdk.im.db.module.NewFriend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEW_FRIEND.
*/
public class NewFriendDao extends AbstractDao<NewFriend, Long> {

    public static final String TABLENAME = "NEW_FRIEND";

    /**
     * Properties of entity NewFriend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Myid = new Property(1, Long.class, "myid", false, "MYID");
        public final static Property Chat_id = new Property(2, Long.class, "chat_id", false, "CHAT_ID");
        public final static Property Chat_type = new Property(3, Integer.class, "chat_type", false, "CHAT_TYPE");
        public final static Property Comment_name = new Property(4, String.class, "comment_name", false, "COMMENT_NAME");
        public final static Property Nick_name = new Property(5, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property Allow_text = new Property(8, String.class, "allow_text", false, "ALLOW_TEXT");
        public final static Property By1 = new Property(9, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(10, String.class, "by2", false, "BY2");
        public final static Property Origin = new Property(11, String.class, "origin", false, "ORIGIN");
    };


    public NewFriendDao(DaoConfig config) {
        super(config);
    }
    
    public NewFriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEW_FRIEND' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MYID' INTEGER," + // 1: myid
                "'CHAT_ID' INTEGER," + // 2: chat_id
                "'CHAT_TYPE' INTEGER," + // 3: chat_type
                "'COMMENT_NAME' TEXT," + // 4: comment_name
                "'NICK_NAME' TEXT," + // 5: nick_name
                "'AVATAR' TEXT," + // 6: avatar
                "'STATUS' INTEGER," + // 7: status
                "'ALLOW_TEXT' TEXT," + // 8: allow_text
                "'BY1' TEXT," + // 9: by1
                "'BY2' TEXT," + // 10: by2
                "'ORIGIN' TEXT);"); // 11: origin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEW_FRIEND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewFriend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long myid = entity.getMyid();
        if (myid != null) {
            stmt.bindLong(2, myid);
        }
 
        Long chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindLong(3, chat_id);
        }
 
        Integer chat_type = entity.getChat_type();
        if (chat_type != null) {
            stmt.bindLong(4, chat_type);
        }
 
        String comment_name = entity.getComment_name();
        if (comment_name != null) {
            stmt.bindString(5, comment_name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(6, nick_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        String allow_text = entity.getAllow_text();
        if (allow_text != null) {
            stmt.bindString(9, allow_text);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(10, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(11, by2);
        }

        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(12, origin);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewFriend readEntity(Cursor cursor, int offset) {
        NewFriend entity = new NewFriend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // myid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // chat_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // chat_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comment_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nick_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // allow_text
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // by1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // by2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // origin
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewFriend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setChat_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setChat_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setComment_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNick_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAllow_text(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBy1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBy2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrigin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewFriend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewFriend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
