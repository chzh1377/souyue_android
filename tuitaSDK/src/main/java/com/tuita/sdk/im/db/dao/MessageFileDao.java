package com.tuita.sdk.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.tuita.sdk.im.db.module.MessageFile;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_FILE".
*/
public class MessageFileDao extends AbstractDao<MessageFile, Long> {

    public static final String TABLENAME = "MESSAGE_FILE";

    /**
     * Properties of entity MessageFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Cursize = new Property(3, Long.class, "cursize", false, "CURSIZE");
        public final static Property Size = new Property(4, long.class, "size", false, "SIZE");
        public final static Property State = new Property(5, Integer.class, "state", false, "STATE");
        public final static Property InvalidTime = new Property(6, Long.class, "invalidTime", false, "INVALID_TIME");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Localpath = new Property(8, String.class, "localpath", false, "LOCALPATH");
        public final static Property UpdateTime = new Property(9, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property OnlyId = new Property(10, Long.class, "onlyId", false, "ONLY_ID");
    };


    public MessageFileDao(DaoConfig config) {
        super(config);
    }
    
    public MessageFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" INTEGER," + // 2: type
                "\"CURSIZE\" INTEGER," + // 3: cursize
                "\"SIZE\" INTEGER NOT NULL ," + // 4: size
                "\"STATE\" INTEGER," + // 5: state
                "\"INVALID_TIME\" INTEGER," + // 6: invalidTime
                "\"URL\" TEXT NOT NULL ," + // 7: url
                "\"LOCALPATH\" TEXT," + // 8: localpath
//                "\"UPDATE_TIME\" INTEGER);"); // 9: updateTime
                "\"UPDATE_TIME\" INTEGER," + // 9: updateTime
                "\"ONLY_ID\" INTEGER);"); // 9: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Long cursize = entity.getCursize();
        if (cursize != null) {
            stmt.bindLong(4, cursize);
        }
        stmt.bindLong(5, entity.getSize());
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state);
        }
 
        Long invalidTime = entity.getInvalidTime();
        if (invalidTime != null) {
            stmt.bindLong(7, invalidTime);
        }
        stmt.bindString(8, entity.getUrl());
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(9, localpath);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(10, updateTime);
        }

        Long onlyId = entity.getOnlyId();
        if (onlyId != null) {
            stmt.bindLong(11, onlyId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageFile readEntity(Cursor cursor, int offset) {
        MessageFile entity = new MessageFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cursize
            cursor.getLong(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // invalidTime
            cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // localpath
//            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // updateTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // updateTime
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // onlyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCursize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSize(cursor.getLong(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInvalidTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUrl(cursor.getString(offset + 7));
        entity.setLocalpath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOnlyId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
