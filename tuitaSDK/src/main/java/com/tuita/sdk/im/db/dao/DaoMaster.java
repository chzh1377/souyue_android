package com.tuita.sdk.im.db.dao;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import com.tuita.sdk.im.db.helper.CateDaoHelper;
import com.tuita.sdk.im.db.helper.ServiceMessageRecentDaoHelper;
import com.tuita.sdk.im.db.module.Cate;
import com.tuita.sdk.im.db.module.MessageFile;
import com.tuita.sdk.im.db.module.ServiceMessageRecent;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 8;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ContactDao.createTable(db, ifNotExists);
        MessageHistoryDao.createTable(db, ifNotExists);
        NewFriendDao.createTable(db, ifNotExists);
        MessageRecentDao.createTable(db, ifNotExists);
        ConfigDao.createTable(db, ifNotExists);
        GroupDao.createTable(db, ifNotExists);
        GroupMembersDao.createTable(db, ifNotExists);
        ServiceMessageDao.createTable(db, ifNotExists);
        ServiceMessageRecentDao.createTable(db, ifNotExists);
        CateDao.createTable(db, ifNotExists);
        MessageMidDao.createTable(db, ifNotExists);
        MessageFileDao.createTable(db,ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ContactDao.dropTable(db, ifExists);
        MessageHistoryDao.dropTable(db, ifExists);
        NewFriendDao.dropTable(db, ifExists);
        MessageRecentDao.dropTable(db, ifExists);
        ConfigDao.dropTable(db, ifExists);
        GroupDao.dropTable(db, ifExists);
        GroupMembersDao.dropTable(db, ifExists);
        ServiceMessageDao.dropTable(db, ifExists);
        ServiceMessageRecentDao.dropTable(db, ifExists);
        CateDao.dropTable(db, ifExists);
        MessageMidDao.dropTable(db, ifExists);
        MessageFileDao.dropTable(db,ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            ConfigDao.dropTable(db, false);
            createAllTables(db, true);
            try {
                if (oldVersion < 3) {
                    db.execSQL("ALTER TABLE MESSAGE_RECENT ADD COLUMN " + "DRAFTTEXT" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_RECENT ADD COLUMN " + "DRAFTFORAT" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_RECENT ADD COLUMN " + "BY3" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_RECENT ADD COLUMN " + "BY4" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_RECENT ADD COLUMN " + "BY5" + " TEXT");
                }
                if (oldVersion < 4) {
                    db.execSQL("ALTER TABLE MESSAGE_HISTORY ADD COLUMN " + "CONTENTFORAT" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_HISTORY ADD COLUMN " + "BY3" + " TEXT");
                    db.execSQL("ALTER TABLE MESSAGE_HISTORY ADD COLUMN " + "BY4" + " TEXT");
                }
                if (oldVersion < 5) {
                    db.execSQL("ALTER TABLE CONTACT ADD COLUMN " + "IS_NEWS_NOTIFY" + " INTEGER NOT NULL DEFAULT 0");
                    db.execSQL("ALTER TABLE SERVICE_MESSAGE_RECENT ADD COLUMN " + "ISSHOWHISTORY" + " INTEGER NOT NULL DEFAULT 0");

                    //把服务号re表中数据导入cate表
                    db.execSQL("INSERT INTO CATE " +
                            "(MY_ID,CATE_ID,CATE_NAME,CATE_AVATAR,DIGST,BUBBLE_NUM,DATE,IS_HAS_CATEID) " +
                            "SELECT DISTINCT MYID,CATE_ID,CATE_NAME,CATE_AVATAR,DIGST,BUBBLE_NUM,DATE,0 FROM " +
                            "SERVICE_MESSAGE_RECENT WHERE SERVICE_ID = CATE_ID");

                    db.execSQL("INSERT INTO CATE " +
                            "(MY_ID,CATE_ID,CATE_NAME,CATE_AVATAR,DIGST,BUBBLE_NUM,DATE,IS_HAS_CATEID) " +
                            "SELECT DISTINCT MYID,CATE_ID,CATE_NAME,CATE_AVATAR,DIGST,BUBBLE_NUM,DATE,1 FROM " +
                            "SERVICE_MESSAGE_RECENT WHERE SERVICE_ID != CATE_ID");

                    //添加好友来源
                    db.execSQL("ALTER TABLE NEW_FRIEND ADD COLUMN " + "ORIGIN" + " TEXT");

                    //给5.0版本的recent的by3增加数据
                    db.execSQL("UPDATE MESSAGE_RECENT SET BY3=0");
                }
                if(oldVersion<6){
                    db.execSQL("ALTER TABLE SERVICE_MESSAGE ADD COLUMN " + "SUBDIGST"+ " TEXT");
//                    db.execSQL("ALTER TABLE SERVICE_MESSAGE ADD COLUMN " + "IS_SHOW_NOTIFY"+ " INTEGER NOT NULL DEFAULT 1");
                }
                if(oldVersion<7){
                    //需要增加 MessageHistory表的一个ID字段
                    db.execSQL("ALTER TABLE MESSAGE_HISTORY ADD COLUMN " + "FILE_MSG_ID"+ " INT");
                }
                if(oldVersion<8)
                {
                    db.execSQL("ALTER TABLE GROUPS ADD COLUMN " + "EXTENDINFO" + " TEXT");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ContactDao.class);
        registerDaoClass(MessageHistoryDao.class);
        registerDaoClass(NewFriendDao.class);
        registerDaoClass(MessageRecentDao.class);
        registerDaoClass(ConfigDao.class);
        registerDaoClass(GroupDao.class);
        registerDaoClass(GroupMembersDao.class);
        registerDaoClass(ServiceMessageDao.class);
        registerDaoClass(ServiceMessageRecentDao.class);
        registerDaoClass(CateDao.class);
        registerDaoClass(MessageMidDao.class);
        registerDaoClass(MessageFileDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.None, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }


}
