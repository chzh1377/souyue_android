package com.tuita.sdk.im.db.dao;

import com.tuita.sdk.im.db.module.GroupMembers;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GROUP_MEMBERS.
 */
public class GroupMembersDao extends AbstractDao<GroupMembers, Long> {

    public static final String TABLENAME = "GROUP_MEMBERS";

    /**
     * Properties of entity GroupMembers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GROUP_ID = new Property(1, long.class, "GROUP_ID", false, "GROUP__ID");
        public final static Property MEMBER_ID = new Property(2, long.class, "MEMBER_ID", false, "MEMBER__ID");
        public final static Property NICK_NAME = new Property(3, String.class, "NICK_NAME", false, "NICK__NAME");
        public final static Property MEMBER_AVATAR = new Property(4, String.class, "MEMBER_AVATAR", false, "MEMBER__AVATAR");
        public final static Property MEMBER_NAME = new Property(5, String.class, "MEMBER_NAME", false, "MEMBER__NAME");
        public final static Property SELF_ID = new Property(6, long.class, "SELF_ID", false, "SELF__ID");
        public final static Property IS_OWNER = new Property(7, int.class, "IS_OWNER", false, "IS__OWNER");
        public final static Property BY1 = new Property(8, String.class, "BY1", false, "BY1");
        public final static Property BY2 = new Property(9, String.class, "BY2", false, "BY2");
    };


    public GroupMembersDao(DaoConfig config) {
        super(config);
    }

    public GroupMembersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_MEMBERS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GROUP__ID' INTEGER NOT NULL ," + // 1: GROUP_ID
                "'MEMBER__ID' INTEGER NOT NULL ," + // 2: MEMBER_ID
                "'NICK__NAME' TEXT," + // 3: NICK_NAME
                "'MEMBER__AVATAR' TEXT," + // 4: MEMBER_AVATAR
                "'MEMBER__NAME' TEXT," + // 5: MEMBER_NAME
                "'SELF__ID' INTEGER NOT NULL ," + // 6: SELF_ID
                "'IS__OWNER' INTEGER NOT NULL ," + // 7: IS_OWNER
                "'BY1' TEXT," + // 8: BY1
                "'BY2' TEXT);"); // 9: BY2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_MEMBERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupMembers entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroup_id());
        stmt.bindLong(3, entity.getMember_id());

        String NICK_NAME = entity.getNick_name();
        if (NICK_NAME != null) {
            stmt.bindString(4, NICK_NAME);
        }

        String MEMBER_AVATAR = entity.getMember_avatar();
        if (MEMBER_AVATAR != null) {
            stmt.bindString(5, MEMBER_AVATAR);
        }

        String MEMBER_NAME = entity.getMember_name();
        if (MEMBER_NAME != null) {
            stmt.bindString(6, MEMBER_NAME);
        }
        stmt.bindLong(7, entity.getSelf_id());

        stmt.bindLong(8, entity.getIs_owner());

        String BY1 = entity.getBy1();
        if (BY1 != null) {
            stmt.bindString(9, BY1);
        }

        String BY2 = entity.getBy2();
        if (BY2 != null) {
            stmt.bindString(10, BY2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public GroupMembers readEntity(Cursor cursor, int offset) {
        GroupMembers entity = new GroupMembers( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // GROUP_ID
                cursor.getLong(offset + 2), // MEMBER_ID
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NICK_NAME
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MEMBER_AVATAR
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MEMBER_NAME
                cursor.getLong(offset + 6), // SELF_ID
                cursor.getInt(offset + 7), // IS_OWNER
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // BY1
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // BY2
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupMembers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.getLong(offset + 1));
        entity.setMember_id(cursor.getLong(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMember_avatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMember_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSelf_id(cursor.getLong(offset + 6));
        entity.setIs_owner(cursor.getInt(offset + 7));
        entity.setBy1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBy2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupMembers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(GroupMembers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
